name: TESTS

on:
  push:
    branches:
      - rm-electron

jobs:
  build:
    name: Notarize & straple release
    runs-on: macOS-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASS: ${{ secrets.APPLEIDPASS }}
      IDENTITY_ID: ${{ secrets.IDENTITY_ID }}
      CSC_LINK: ${{ secrets.CSC_LINK }}
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      KEYCHAIN_PROFILE: studio.oneclick.gabin
      KEYCHAIN_PSW: blipbloup

    steps:
      - uses: actions/checkout@v3

      - name: read package.json version
        uses: Saionaro/extract-package-version@v1.2.1
        id: package-json

      - uses: robinraju/release-downloader@v1.7
        with:
          tag: v${{ steps.package-json.outputs.version }}
          fileName: "*"

      # - name: Display structure of downloaded files
      #   run: ls

      - uses: actions/setup-node@v3
        name: Install Node.js
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm installAll

      - name: build macOS [BIN]
        run: |
          pnpm run mac:pkg-pre
          pnpm run mac:pkg-x64

      - name: prepare codesign [decode]
        run: bash -c 'base64 --decode <<< "$CSC_LINK" > certificate.p12'

      - name: prepare codesign [security]
        run: |
          security create-keychain -p $KEYCHAIN_PSW build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $KEYCHAIN_PSW build.keychain
          security import certificate.p12 -k build.keychain -P $CSC_KEY_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PSW build.keychain

      - name: codesign binary
        run: |
          echo "codesign : gabin-mac-x64"
          /usr/bin/codesign --deep --force --options=runtime --verbose --sign $IDENTITY_ID ./dist/gabin-mac-x64

      - name: build macOS [APP]
        run: |
          pnpm run mac:app-pre
          pnpm run mac:app-x64
          pnpm run mac:app-post

      - name: codesign app
        run: |
          echo "codesign : Gabin-mac-x64.app"
          /usr/bin/codesign --deep --force --options=runtime --verbose --sign $IDENTITY_ID ./dist/Gabin-mac-x64.app

      - name: build macOS [DMG]
        run: pnpm run mac:dmg-x64

      - name: codesign dmg
        run: |
          echo "codesign : Gabin-mac-x64.dmg"
          /usr/bin/codesign --deep --force --options=runtime --verbose --sign $IDENTITY_ID ./dist/Gabin-mac-x64.dmg

      # - name: notarytool store-credentials
      #   run: |
      #     xcrun notarytool store-credentials \
      #       $KEYCHAIN_PROFILE \
      #       --apple-id "$APPLE_ID" \
      #       --password "$APPLE_ID_PASS" \
      #       --team-id $IDENTITY_ID \
      #       --verbose

      # - name: notarytool submit
      #   run: |
      #     xcrun notarytool submit \
      #       ./Gabin-mac-x64.dmg \
      #       --keychain-profile $KEYCHAIN_PROFILE \
      #       --progress \
      #       --wait \
      #       --verbose

      # - name: staple x64 dmg
      #   run: |
      #     xcrun stapler staple ./Gabin-mac-x64.dmg

      - name: upload releases
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GH_TOKEN }}
          name: ${{ steps.package-json.outputs.version }}
          tag: v${{ steps.package-json.outputs.version }}
          commit: ${{ github.sha }}
          allowUpdates: true
          artifacts: "./dist/Gabin-*.dmg,./dist/gabin-*"
          prerelease: true
