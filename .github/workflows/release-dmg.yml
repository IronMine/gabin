name: TESTS

on:
  push:
    branches:
      - rm-electron2

jobs:
  release:
    name: build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest]

    steps:
      - uses: actions/checkout@v3

      - name: read package.json version
        uses: Saionaro/extract-package-version@v1.2.1
        id: package-json

      - uses: actions/setup-node@v3
        name: Install Node.js
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      #TODO - Remove this once https://github.com/electron-userland/electron-builder/issues/6933#issuecomment-1213438889 is resolved
      - name: Get pnpm file path
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          PNPM_VERSION=$(pnpm -v)
          echo "PNPM_FILE=\"/c/users/runneradmin/setup-pnpm/node_modules/.pnpm/pnpm@$PNPM_VERSION/node_modules/pnpm/bin/pnpm.cjs\"" >> $GITHUB_ENV
      - name: Tweak pnpm.cjs
        if: matrix.os == 'windows-latest'
        run: sed -i 's/\/usr\/bin\/env node/node/g' ${{env.PNPM_FILE}}
        shell: bash

      - name: Install dependencies
        run: pnpm installAll

      - name: build macOS [PKG]
        if: matrix.os == macos-latest
        run: |
          pnpm run mac:pkg-pre
          pnpm run mac:pkg-x64

      - name: build macOS [BIN]
        if: matrix.os == macos-latest
        run: |
          pnpm run mac:app-pre
          pnpm run mac:app-x64
          pnpm run mac:app-post

      - name: Codesign app bundle
        if: matrix.os == 'macos-latest'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          MACOS_CERTIFICATE: ${{ secrets.CSC_LINK }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.CSC_NAME }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.CSC_KEY_PASSWORD }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.KEYCHAIN_PSW }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain 
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

          # We finally codesign our app bundle, specifying the Hardened runtime option          
          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime --entitlements ./entitlements.plist ./dist/Gabin-mac-x64.app -v

      - name: "Notarize app bundle"
        if: matrix.os == 'macos-latest'
        env:
          MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.APPLE_ID }}
          MACOS_NOTARIZATION_PWD: ${{ secrets.APPLEIDPASS }}
          MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "Create keychain profile"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$MACOS_NOTARIZATION_APPLE_ID" --team-id "$MACOS_NOTARIZATION_TEAM_ID" --password "$MACOS_NOTARIZATION_PWD"

          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "./dist/Gabin-mac-x64.app" "notarization.zip"

          echo "Notarize app"
          xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait

          echo "Attach staple"
          xcrun stapler staple "./dist/Gabin-mac-x64.app"
        
      - name: "Upload artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: "Gabin-mac-x64"
          path: "./dist/Gabin-mac-x64.app"
