name: Create Release

on:
  push:
    branches:
      - rm-electron

jobs:
  create:
    name: Create release
    runs-on: ubuntu-latest
    env:
      tag_prefix: nightly-tag-
      release_prefix: Release 
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ env.tag_prefix }}${{ steps.date.outputs.NOW }}
      release_name: ${{ env.release_prefix }}${{ steps.date.outputs.NOW }}
    steps:
      - name: Get current date
        id: date
        run: |
          echo "NOW=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
      - name: create release
        uses: ncipollo/release-action@v1
        id: create_release
        with:
          token: ${{ secrets.GH_TOKEN }}
          name: Release ${{ steps.date.outputs.NOW }}
          tag: ${{ env.tag_prefix }}${{ steps.date.outputs.NOW }}
          commit: ${{ github.sha }}
          draft: true
          allowUpdates: true

  build:
    name: Build & upload release [${{ matrix.os }}]
    runs-on: ${{ matrix.os }}
    needs: create

    strategy:
      matrix:
        os: [macOS-latest]
        # os: [windows-latest, macOS-latest]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        name: Install Node.js
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Get pnpm file path
        shell: bash
        run: |
          PNPM_VERSION=$(pnpm -v)
          echo "PNPM_FILE=\"/c/users/runneradmin/setup-pnpm/node_modules/.pnpm/pnpm@$PNPM_VERSION/node_modules/pnpm/bin/pnpm.cjs\"" >> $GITHUB_ENV

      #TODO - Remove this once https://github.com/electron-userland/electron-builder/issues/6933#issuecomment-1213438889 is resolved
      - name: Tweak pnpm.cjs
        if: matrix.os == 'windows-latest'
        run: sed -i 's/\/usr\/bin\/env node/node/g' ${{env.PNPM_FILE}}
        shell: bash

      - name: Install dependencies
        run: pnpm installAll

      - name: build macOS
        if: matrix.os == 'macOS-latest'
        run: pnpm run pkg:mac

      # - name: Codesign executable
      #   env:
      #     MACOS_CERTIFICATE: ${{ secrets.APPLE_ID }}
      #     MACOS_CERTIFICATE_PWD: ${{ secrets.APPLEIDPASS }}
      #   run: |
      #     echo $MACOS_CERTIFICATE | base64 â€”decode > certificate.p12
      #     security create-keychain -p <your-password> build.keychain
      #     security default-keychain -s build.keychain
      #     security unlock-keychain -p <your-password> build.keychain
      #     security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
      #     security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k <your-password> build.keychain
      #     /usr/bin/codesign --force -s <identity-id> ./path/to/you/app -v

      # - name: build windows
      #   if: matrix.os == 'windows-latest'
      #   run: pnpm run pkg:win

      - name: update release macOS
        if: matrix.os == 'macOS-latest'
        uses: ncipollo/release-action@v1
        id: update_release_macos
        with:
          token: ${{ secrets.GH_TOKEN }}
          name: ${{ needs.create.outputs.release_name }}
          tag: ${{ needs.create.outputs.tag_name }}
          allowUpdates: true
          artifacts: "./dist/gabin-macos*.zip"
          draft: true

      # - name: update release window
      #   if: matrix.os == 'windows-latest'
      #   uses: ncipollo/release-action@v1
      #   id: update_release_win
      #   with:
      #     token: ${{ secrets.GH_TOKEN }}
      #     name: ${{ needs.create.outputs.release_name }}
      #     tag: ${{ needs.create.outputs.tag_name }}
      #     allowUpdates: true
      #     artifacts: "./dist/test-pkg-rl-win.exe"
      #     draft: true
