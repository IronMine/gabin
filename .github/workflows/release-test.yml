name: Create Release

on:
  push:
    branches:
      - rm-electron

jobs:
  build:
    name: Build & upload release [${{ matrix.os }}]
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASS: ${{ secrets.APPLEIDPASS }}
      IDENTITY_ID: ${{ secrets.IDENTITY_ID }}
      CSC_LINK: ${{ secrets.CSC_LINK }}
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      KEYCHAIN_PROFILE: studio.oneclick.gabin
      KEYCHAIN_PSW: blipbloup

    strategy:
      matrix:
        os: [macOS-latest]
        # os: [windows-latest, macOS-latest]

    steps:
      - uses: actions/checkout@v3

      - name: read package.json version
        uses: Saionaro/extract-package-version@v1.2.1
        id: package-json

      - uses: actions/setup-node@v3
        name: Install Node.js
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      #TODO - Remove this once https://github.com/electron-userland/electron-builder/issues/6933#issuecomment-1213438889 is resolved
      - name: Get pnpm file path
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          PNPM_VERSION=$(pnpm -v)
          echo "PNPM_FILE=\"/c/users/runneradmin/setup-pnpm/node_modules/.pnpm/pnpm@$PNPM_VERSION/node_modules/pnpm/bin/pnpm.cjs\"" >> $GITHUB_ENV

      #TODO - Remove this once https://github.com/electron-userland/electron-builder/issues/6933#issuecomment-1213438889 is resolved
      - name: Tweak pnpm.cjs
        if: matrix.os == 'windows-latest'
        run: sed -i 's/\/usr\/bin\/env node/node/g' ${{env.PNPM_FILE}}
        shell: bash

      - name: Install dependencies
        run: pnpm installAll

      - name: build windows
        if: matrix.os == 'windows-latest'
        run: pnpm run win:pkg

      - name: build macOS [BIN]
        if: matrix.os == 'macOS-latest'
        run: |
          pnpm run mac:pkg-pre
          pnpm run mac:pkg-x64

      - name: prepare codesign [decode]
        if: matrix.os == 'macOS-latest'
        run: bash -c 'base64 --decode <<< "$CSC_LINK" > certificate.p12'

      - name: prepare codesign [security]
        if: matrix.os == 'macOS-latest'
        run: |
          security create-keychain -p $KEYCHAIN_PSW build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $KEYCHAIN_PSW build.keychain
          security import certificate.p12 -k build.keychain -P $CSC_KEY_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PSW build.keychain

      - name: codesign binary
        if: matrix.os == 'macOS-latest'
        run: |
          if [ -f ./dist/gabin-mac-x64 ]; then
            echo "codesign : gabin-mac-x64"
            /usr/bin/codesign --deep --force --verbose --sign $IDENTITY_ID ./dist/gabin-mac-x64
          fi
          if [ -f ./dist/gabin-mac-arm64 ]; then
            echo "codesign : gabin-mac-arm64"
            /usr/bin/codesign --deep --force --verbose --sign $IDENTITY_ID ./dist/gabin-mac-arm64
          fi

      - name: build macOS [APP]
        if: matrix.os == 'macOS-latest'
        run: |
          pnpm run mac:app-pre
          pnpm run mac:app-x64
          pnpm run mac:app-post

      - name: codesign app
        if: matrix.os == 'macOS-latest'
        run: |
          if [ -d ./dist/Gabin-mac-x64.app ]; then
            echo "codesign : Gabin-mac-x64.app"
            /usr/bin/codesign --deep --force --verbose --sign $IDENTITY_ID ./dist/Gabin-mac-x64.app
          fi
          if [ -d ./dist/Gabin-mac-arm64.app ]; then
            echo "codesign : Gabin-mac-arm64.app"
            /usr/bin/codesign --deep --force --verbose --sign $IDENTITY_ID ./dist/Gabin-mac-arm64.app
          fi

      - name: build macOS [DMG]
        if: matrix.os == 'macOS-latest'
        run: pnpm run mac:dmg-x64

      - name: codesign dmg
        if: matrix.os == 'macOS-latest'
        run: |
          if [ -f ./dist/Gabin-mac-x64.dmg ]; then
            echo "codesign : Gabin-mac-x64.dmg"
            /usr/bin/codesign --deep --force --verbose --sign $IDENTITY_ID ./dist/Gabin-mac-x64.dmg
          fi
          if [ -f ./dist/Gabin-mac-arm64.dmg ]; then
            echo "codesign : Gabin-mac-arm64.dmg"
            /usr/bin/codesign --deep --force --verbose --sign $IDENTITY_ID ./dist/Gabin-mac-arm64.dmg
          fi

      - name: check mac x64 file
        if: matrix.os == 'macOS-latest'
        id: check_mac_x64_file
        uses: andstor/file-existence-action@v2
        with:
          files: "./dist/Gabin-mac-x64.dmg"

      - name: check mac arm64 file
        if: matrix.os == 'macOS-latest'
        id: check_mac_arm64_file
        uses: andstor/file-existence-action@v2
        with:
          files: "./dist/Gabin-mac-arm64.dmg"

      - name: notarytool store-credentials
        if: matrix.os == 'macOS-latest'
        run: |
          xcrun notarytool store-credentials \
            $KEYCHAIN_PROFILE \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASS" \
            --team-id $IDENTITY_ID \
            --verbose

      - name: notarytool submit [x64]
        if: matrix.os == 'macOS-latest' && steps.check_mac_x64_file.outputs.files_exists == 'true'
        run: |
          xcrun notarytool submit \
            ./dist/Gabin-mac-x64.dmg \
            --keychain-profile $KEYCHAIN_PROFILE \
            --progress \
            --wait \
            --verbose

      - name: staple dmg [x64]
        if: matrix.os == 'macOS-latest' && steps.check_mac_x64_file.outputs.files_exists == 'true'
        run: |
          xcrun stapler staple ./dist/Gabin-mac-x64.dmg

      - name: notarytool submit [arm64]
        if: matrix.os == 'macOS-latest' && steps.check_mac_arm64_file.outputs.files_exists == 'true'
        run: |
          xcrun notarytool submit \
            ./dist/Gabin-mac-arm64.dmg \
            --keychain-profile $KEYCHAIN_PROFILE \
            --progress \
            --wait \
            --verbose

      - name: staple dmg [arm64]
        if: matrix.os == 'macOS-latest' && steps.check_mac_arm64_file.outputs.files_exists == 'true'
        run: |
          xcrun stapler staple ./dist/Gabin-mac-arm64.dmg

      - name: upload releases
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GH_TOKEN }}
          name: ${{ steps.package-json.outputs.version }}
          tag: v${{ steps.package-json.outputs.version }}
          commit: ${{ github.sha }}
          allowUpdates: true
          artifacts: "./dist/Gabin-*.dmg,./dist/gabin-*"
          draft: true
